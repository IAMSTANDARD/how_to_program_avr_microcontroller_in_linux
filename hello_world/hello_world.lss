
hello_world.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000000fe  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000db  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#define F_CPU 8000000UL
#include<util/delay.h>
int main() {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    //unsigned char x = 0;
    DDRB = 0xff; // make PORTB as O/P
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
		DDRA = 0xff;
  9a:	8a bb       	out	0x1a, r24	; 26
		char array[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67,0x5f,0x7c,0x58,0x5e,0x79,0x71};
  9c:	80 e1       	ldi	r24, 0x10	; 16
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	9e 01       	movw	r18, r28
  b0:	2f 5e       	subi	r18, 0xEF	; 239
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1

    while(1) {
				for(int i=0;i<16;i++) {
				PORTB = ~(array[i]);
  b8:	81 91       	ld	r24, Z+
  ba:	80 95       	com	r24
  bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	4f ef       	ldi	r20, 0xFF	; 255
  c0:	54 e3       	ldi	r21, 0x34	; 52
  c2:	6c e0       	ldi	r22, 0x0C	; 12
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4c>
  ce:	00 00       	nop
    DDRB = 0xff; // make PORTB as O/P
		DDRA = 0xff;
		char array[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67,0x5f,0x7c,0x58,0x5e,0x79,0x71};

    while(1) {
				for(int i=0;i<16;i++) {
  d0:	2e 17       	cp	r18, r30
  d2:	3f 07       	cpc	r19, r31
  d4:	89 f7       	brne	.-30     	; 0xb8 <main+0x36>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0


//Binary counter code

				for(int i=0;i<256;i++){
				PORTA = i;
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	50 e7       	ldi	r21, 0x70	; 112
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x60>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6a>
  ec:	00 00       	nop



//Binary counter code

				for(int i=0;i<256;i++){
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	81 15       	cp	r24, r1
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	94 07       	cpc	r25, r20
  f6:	89 f7       	brne	.-30     	; 0xda <main+0x58>
  f8:	dd cf       	rjmp	.-70     	; 0xb4 <main+0x32>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
